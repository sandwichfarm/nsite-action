name: 'nsite Action'
description: 'Deploys static website files to Blossom/Nostr using nsite deployment tools.'
author: 'nsite-action Developers'

inputs:
  tool:
    description: 'The deployment tool to use: nsyte (default), nsite-cli, nous-cli, or nostr-deploy-cli'
    required: false
    default: 'nsyte'
  version:
    description: 'The version of the deployment tool to use (e.g., "v0.5.3", "latest"). Only applies to binary tools (nsyte).'
    required: false
    default: 'latest'
  nbunksec:
    description: 'The nbunksec string for authentication via NIP-46 bunker (only supported by nsyte). Store this as a GitHub Secret.'
    required: false
  private_key:
    description: 'The Nostr private key in nsec format. Required for tools that do not support bunker. Store this as a GitHub Secret.'
    required: false
  directory:
    description: 'The directory containing the static files to upload.'
    required: true
  relays:
    description: 'YAML array of Nostr relay WebSocket URIs to publish the site event to. Example: ["wss://relay1.example.com", "wss://relay2.example.com"]'
    required: true
  servers:
    description: 'YAML array of Blossom server WebSocket URIs to upload files to. Example: ["wss://server1.example.com", "wss://server2.example.com"]'
    required: true
  force:
    description: 'Corresponds to the --force flag in nsyte upload. Re-upload all files.'
    required: false
    default: 'false'
  purge:
    description: 'Corresponds to the --purge flag in nsyte upload. Delete remote files not present locally.'
    required: false
    default: 'false'
  verbose:
    description: 'Corresponds to the --verbose flag in nsyte upload. Show detailed output.'
    required: false
    default: 'false'
  concurrency:
    description: 'Corresponds to the --concurrency flag in nsyte upload. Number of parallel uploads.'
    required: false
    default: '4'
  fallback:
    description: 'Corresponds to the --fallback flag in nsyte upload. Path to the fallback HTML file (e.g., /index.html for SPAs).'
    required: false
    default: ''
  publish_server_list: 
    description: 'true/false. If true, the server list will be published to relays.'
    required: false
    default: 'false'
  publish_relay_list: 
    description: 'true/false. If true, the relay list will be published to Blossom servers.'
    required: false
    default: 'false'
  publish_profile: 
    description: 'true/false. If true, the profile will be published to relays.'
    required: false
    default: 'false'

outputs:
  status:
    description: 'Status of the deployment operation (e.g., "success").'
  tool_used:
    description: 'The deployment tool that was used.'
  tool_version_used:
    description: 'The actual version of the deployment tool that was used (for binary tools).'
  nsyte_version_used:
    description: 'DEPRECATED: Use tool_version_used instead. Kept for backward compatibility.'

branding:
  icon: 'upload-cloud'
  color: 'purple'

runs:
  using: 'composite'
  steps:
    - name: Determine Platform
      id: platform
      shell: bash
      run: |
        PLATFORM=""
        EXE_SUFFIX=""
        if [[ "${{ runner.os }}" == "Linux" ]]; then PLATFORM="linux";
        elif [[ "${{ runner.os }}" == "macOS" ]]; then PLATFORM="macos";
        elif [[ "${{ runner.os }}" == "Windows" ]]; then PLATFORM="windows"; EXE_SUFFIX=".exe";
        else echo "::error::Unsupported runner OS: ${{ runner.os }}"; exit 1; fi
        echo "Detected platform: $PLATFORM"
        echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
        echo "exe_suffix=$EXE_SUFFIX" >> $GITHUB_OUTPUT

    - name: Validate Inputs
      shell: bash
      run: |
        TOOL="${{ inputs.tool }}"
        NBUNKSEC="${{ inputs.nbunksec }}"
        PRIVATE_KEY="${{ inputs.private_key }}"
        
        # Validate tool choice
        case "$TOOL" in
          "nsyte"|"nsite-cli"|"nous-cli"|"nostr-deploy-cli")
            echo "Using tool: $TOOL"
            ;;
          *)
            echo "::error::Unknown tool: $TOOL. Supported tools: nsyte, nsite-cli, nous-cli, nostr-deploy-cli"
            exit 1
            ;;
        esac
        
        # Validate authentication
        if [[ "$TOOL" == "nsyte" ]]; then
          if [[ -z "$NBUNKSEC" && -z "$PRIVATE_KEY" ]]; then
            echo "::error::nsyte requires either nbunksec or private_key"
            exit 1
          fi
        else
          if [[ -z "$PRIVATE_KEY" ]]; then
            echo "::error::$TOOL requires private_key (does not support bunker authentication)"
            exit 1
          fi
        fi

    - name: Ensure jq is installed
      shell: bash
      run: |
        set -e
        if [[ "${{ steps.platform.outputs.platform }}" == "linux" ]]; then
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing via apt-get..."
            sudo apt-get update && sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi
        elif [[ "${{ steps.platform.outputs.platform }}" == "macos" ]]; then
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing via brew..."
            brew install jq
          else
            echo "jq is already installed."
          fi
        elif [[ "${{ steps.platform.outputs.platform }}" == "windows" ]]; then
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing via choco..."
            choco install jq -y
            export PATH="$PATH:/c/ProgramData/chocolatey/bin"
          else
            echo "jq is already installed."
          fi
        else
          echo "Unknown platform for jq installation."
          exit 1
        fi

    - name: Set nsyte Version
      id: version
      if: ${{ inputs.tool == 'nsyte' }}
      shell: bash
      run: |
        NSYT_VERSION_INPUT="${{ inputs.version }}"
        NSYT_VERSION_FINAL=""
        VERSION_NUMBER=""
        if [[ "$NSYT_VERSION_INPUT" == "latest" ]]; then
          echo "Input version is 'latest', resolving..."
          LATEST_TAG=""
          # Try GH CLI first: it respects the "latest" flag set in GitHub UI if --limit 1 is used.
          if command -v gh &> /dev/null && gh auth status &> /dev/null; then
            echo "Using 'gh' CLI to find latest release."
            LATEST_TAG=$(gh release list -R sandwichfarm/nsyte --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null)
          fi
          # Fallback to curl /releases/latest endpoint if gh failed or not available/authed
          if [[ -z "$LATEST_TAG" ]]; then 
            echo "Using GitHub API (curl) to find latest release (gh CLI failed or not available/authed)."
            LATEST_TAG=$(curl -s -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/sandwichfarm/nsyte/releases/latest | grep -o '"tag_name": *"[^"]*"' | cut -d '"' -f 4)
          fi
          # If still no tag, try the semantic sort as a robust last resort (requires sort -V, usually on Linux)
          if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "null" ]]; then 
            echo "Fallback: Attempting semantic version sort of all release tags."
            ALL_TAGS=$(gh release list -R sandwichfarm/nsyte --json tagName --jq '.[].tagName' 2>/dev/null)
            if [[ -n "$ALL_TAGS" ]]; then
                LATEST_TAG=$(echo "$ALL_TAGS" | grep '^v[0-9]' | sort -V | tail -n 1)
            fi
          fi
          if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "null" ]]; then echo "::error::Failed to determine latest nsyte release tag."; exit 1; fi
          NSYT_VERSION_FINAL="$LATEST_TAG"
          echo "Resolved latest version: $NSYT_VERSION_FINAL"
        else
          NSYT_VERSION_FINAL="${{ inputs.version }}"
          echo "Using specified version: $NSYT_VERSION_FINAL"
        fi
        # Extract version number for asset filename
        if [[ "$NSYT_VERSION_FINAL" =~ ^v(.+)$ ]]; then VERSION_NUMBER="${BASH_REMATCH[1]}"; else VERSION_NUMBER="$NSYT_VERSION_FINAL"; fi
        echo "Using nsyte tag: $NSYT_VERSION_FINAL (version number for asset: $VERSION_NUMBER)"
        # Using ::set-output for version outputs as GITHUB_OUTPUT can be finicky in composite actions
        echo "::set-output name=version::${NSYT_VERSION_FINAL}"
        echo "::set-output name=version_number::${VERSION_NUMBER}"

    - name: Download nsyte
      id: download_nsyte
      if: ${{ inputs.tool == 'nsyte' }}
      shell: bash
      run: |
        VERSION_TAG="${{ steps.version.outputs.version }}"
        VERSION_NUMBER="${{ steps.version.outputs.version_number }}"
        PLATFORM="${{ steps.platform.outputs.platform }}"
        EXE_SUFFIX="${{ steps.platform.outputs.exe_suffix }}"
        ASSET_FILENAME="nsyte-$PLATFORM-$VERSION_NUMBER$EXE_SUFFIX"
        DOWNLOAD_URL="https://github.com/sandwichfarm/nsyte/releases/download/$VERSION_TAG/$ASSET_FILENAME"
        echo "Downloading nsyte $ASSET_FILENAME from $DOWNLOAD_URL"
        mkdir -p nsyte_bin 
        HTTP_STATUS=$(curl -sL -w "%{http_code}" -o "nsyte_bin/$ASSET_FILENAME" "$DOWNLOAD_URL")
        if [[ "$HTTP_STATUS" != "200" ]]; then
          echo "::error::Failed to download $ASSET_FILENAME (HTTP Status: $HTTP_STATUS)."
          echo "Please check if version '$VERSION_TAG' and asset '$ASSET_FILENAME' exist for platform '$PLATFORM'."
          
          if command -v gh &> /dev/null && gh auth status &> /dev/null; then
            gh release view "$VERSION_TAG" -R sandwichfarm/nsyte --json assets --jq '.assets[].name' 2>/dev/null || echo "(Could not list assets with gh CLI)"
          else 
            curl -s "https://api.github.com/repos/sandwichfarm/nsyte/releases/tags/$VERSION_TAG" | grep '"name":' | cut -d '"' -f 4 || echo "(Could not list assets with API)"
          fi
          exit 1
        fi
        chmod +x "nsyte_bin/$ASSET_FILENAME"
        # Using ::set-output for nsyte_path
        echo "::set-output name=nsyte_path::$(pwd)/nsyte_bin/$ASSET_FILENAME"

    - name: Build deployment command
      id: build_cmd
      shell: bash
      run: |
        TOOL="${{ inputs.tool }}"
        DIRECTORY="${{ inputs.directory }}"
        
        # Display selected tool prominently
        echo ""
        echo "::notice title=🚀 nsite Deployment Tool::Using deployment tool: $TOOL"
        echo ""
        echo -e "\033[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\033[1;36m┃\033[0m                                                                              \033[1;36m┃\033[0m"
        echo -e "\033[1;36m┃\033[0m  🚀 \033[1;33mnsite-action\033[0m Deployment                                                \033[1;36m┃\033[0m"
        echo -e "\033[1;36m┃\033[0m                                                                              \033[1;36m┃\033[0m"
        echo -e "\033[1;36m┃\033[0m  Selected Tool: \033[1;32m$TOOL\033[0m$(printf '%*s' $((61 - ${#TOOL})) '' | tr ' ' ' ')\033[1;36m┃\033[0m"
        echo -e "\033[1;36m┃\033[0m                                                                              \033[1;36m┃\033[0m"
        
        # Add tool-specific info
        case "$TOOL" in
          "nsyte")
            echo -e "\033[1;36m┃\033[0m  Type: Binary (downloaded)                                                   \033[1;36m┃\033[0m"
            echo -e "\033[1;36m┃\033[0m  Auth: $(if [[ -n "${{ inputs.nbunksec }}" ]]; then echo "Bunker (NIP-46)"; else echo "Private Key"; fi)$(printf '%*s' $((61 - $(if [[ -n "${{ inputs.nbunksec }}" ]]; then echo 15; else echo 11; fi))) '' | tr ' ' ' ')\033[1;36m┃\033[0m"
            ;;
          "nsite-cli")
            echo -e "\033[1;36m┃\033[0m  Type: NPX Package                                                           \033[1;36m┃\033[0m"
            echo -e "\033[1;36m┃\033[0m  Version: 0.1.16                                                             \033[1;36m┃\033[0m"
            echo -e "\033[1;36m┃\033[0m  Auth: Private Key                                                           \033[1;36m┃\033[0m"
            ;;
          "nous-cli")
            echo -e "\033[1;36m┃\033[0m  Type: NPX Package (@soapbox.pub/nous)                                      \033[1;36m┃\033[0m"
            echo -e "\033[1;36m┃\033[0m  Version: 0.1.3                                                              \033[1;36m┃\033[0m"
            echo -e "\033[1;36m┃\033[0m  Auth: Self-managed Keys                                                     \033[1;36m┃\033[0m"
            ;;
          "nostr-deploy-cli")
            echo -e "\033[1;36m┃\033[0m  Type: NPX Package                                                           \033[1;36m┃\033[0m"
            echo -e "\033[1;36m┃\033[0m  Version: 0.7.6                                                              \033[1;36m┃\033[0m"
            echo -e "\033[1;36m┃\033[0m  Auth: Private Key                                                           \033[1;36m┃\033[0m"
            ;;
        esac
        
        echo -e "\033[1;36m┃\033[0m                                                                              \033[1;36m┃\033[0m"
        echo -e "\033[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo ""
        
        # Build base command based on tool
        case "$TOOL" in
          "nsyte")
            # Use nbunksec if provided, otherwise use private key
            if [[ -n "${{ inputs.nbunksec }}" ]]; then
              CMD="\"${{ steps.download_nsyte.outputs.nsyte_path }}\" upload \"$DIRECTORY\" -i --nbunksec \"${{ inputs.nbunksec }}\""
            else
              CMD="\"${{ steps.download_nsyte.outputs.nsyte_path }}\" upload \"$DIRECTORY\" -i --privatekey \"${{ inputs.private_key }}\""
            fi
            ;;
          "nsite-cli")
            CMD="npx nsite-cli@0.1.16 upload \"$DIRECTORY\" --privatekey \"${{ inputs.private_key }}\""
            ;;
          "nous-cli")
            # nous-cli manages its own keys, but we'll pass the private key if provided
            if [[ -n "${{ inputs.private_key }}" ]]; then
              # nous-cli doesn't have a direct privatekey flag, it uses configure
              CMD="npx @soapbox.pub/nous@0.1.3 publish \"$DIRECTORY\""
              echo "::warning::nous-cli manages its own keys. The provided private key will not be used."
            else
              CMD="npx @soapbox.pub/nous@0.1.3 publish \"$DIRECTORY\""
            fi
            ;;
          "nostr-deploy-cli")
            # First import the key, then deploy with skip-setup
            CMD="npx nostr-deploy-cli@0.7.6 auth -k \"${{ inputs.private_key }}\" && npx nostr-deploy-cli@0.7.6 deploy -d \"$DIRECTORY\" --skip-setup"
            ;;
        esac
        
        # Handle tool-specific parameters
        case "$TOOL" in
          "nsyte")
            # Handle relays and servers
            if [[ -n "${{ inputs.relays }}" ]]; then
              RELAYS_CSV=$(echo "${{ inputs.relays }}" | grep -v '^[[:space:]]*$' | paste -sd,)
              if [[ -n "$RELAYS_CSV" ]]; then CMD+=" --relays \"$RELAYS_CSV\""; fi
            fi
            if [[ -n "${{ inputs.servers }}" ]]; then
              SERVERS_CSV=$(echo "${{ inputs.servers }}" | grep -v '^[[:space:]]*$' | paste -sd,)
              if [[ -n "$SERVERS_CSV" ]]; then CMD+=" --servers \"$SERVERS_CSV\""; fi
            fi
            # nsyte specific flags
            if [[ "${{ inputs.force }}" == "true" ]]; then CMD+=" --force"; fi
            if [[ "${{ inputs.purge }}" == "true" ]]; then CMD+=" --purge"; fi
            if [[ "${{ inputs.verbose }}" == "true" ]]; then CMD+=" --verbose"; fi
            if [[ -n "${{ inputs.fallback }}" ]]; then CMD+=" --fallback \"${{ inputs.fallback }}\""; fi
            if [[ -n "${{ inputs.concurrency }}" ]]; then CMD+=" --concurrency ${{ inputs.concurrency }}"; fi
            if [[ "${{ inputs.publish_server_list }}" == "true" ]]; then CMD+=" --publish-server-list"; fi
            if [[ "${{ inputs.publish_relay_list }}" == "true" ]]; then CMD+=" --publish-relay-list"; fi
            if [[ "${{ inputs.publish_profile }}" == "true" ]]; then CMD+=" --publish-profile"; fi
            ;;
          "nsite-cli")
            # Handle relays and servers for nsite-cli
            if [[ -n "${{ inputs.relays }}" ]]; then
              RELAYS_CSV=$(echo "${{ inputs.relays }}" | grep -v '^[[:space:]]*$' | paste -sd,)
              if [[ -n "$RELAYS_CSV" ]]; then CMD+=" --relays \"$RELAYS_CSV\""; fi
            fi
            if [[ -n "${{ inputs.servers }}" ]]; then
              SERVERS_CSV=$(echo "${{ inputs.servers }}" | grep -v '^[[:space:]]*$' | paste -sd,)
              if [[ -n "$SERVERS_CSV" ]]; then CMD+=" --servers \"$SERVERS_CSV\""; fi
            fi
            if [[ -n "${{ inputs.fallback }}" ]]; then CMD+=" --fallback \"${{ inputs.fallback }}\""; fi
            ;;
          "nous-cli")
            # nous-cli has different parameter handling
            if [[ "${{ inputs.force }}" == "true" ]]; then CMD+=" --force"; fi
            if [[ "${{ inputs.purge }}" == "true" ]]; then CMD+=" --purge"; fi
            if [[ "${{ inputs.verbose }}" == "true" ]]; then CMD+=" --verbose"; fi
            ;;
          "nostr-deploy-cli")
            # nostr-deploy-cli uses config command for relays/servers
            if [[ -n "${{ inputs.relays }}" ]]; then
              RELAYS_LIST=$(echo "${{ inputs.relays }}" | grep -v '^[[:space:]]*$' | tr '\n' ' ')
              CMD="npx nostr-deploy-cli@0.7.6 config -r $RELAYS_LIST && $CMD"
            fi
            if [[ -n "${{ inputs.servers }}" ]]; then
              # nostr-deploy-cli uses -b for blossom server
              FIRST_SERVER=$(echo "${{ inputs.servers }}" | grep -v '^[[:space:]]*$' | head -n1)
              if [[ -n "$FIRST_SERVER" ]]; then
                CMD="npx nostr-deploy-cli@0.7.6 config -b \"$FIRST_SERVER\" && $CMD"
              fi
            fi
            ;;
        esac
        # Using ::set-output for command
        echo "::set-output name=command::${CMD}"

    - name: Run deployment
      id: deployment_run
      shell: bash
      run: |
        set +e # Disable exit on error to manually handle exit codes and ensure outputs are set
        DEPLOYMENT_COMMAND="${{ steps.build_cmd.outputs.command }}"
        TOOL="${{ inputs.tool }}"
        
        # Set tool outputs using ::set-output
        echo "::set-output name=tool_used::$TOOL"
        if [[ "$TOOL" == "nsyte" ]]; then
          echo "::set-output name=tool_version_used::${{ steps.version.outputs.version }}"
          echo "::set-output name=nsyte_version_used::${{ steps.version.outputs.version }}"
        else
          # Set pinned versions for NPX tools
          case "$TOOL" in
            "nsite-cli")
              echo "::set-output name=tool_version_used::0.1.16"
              ;;
            "nous-cli")
              echo "::set-output name=tool_version_used::0.1.3"
              ;;
            "nostr-deploy-cli")
              echo "::set-output name=tool_version_used::0.7.6"
              ;;
          esac
          echo "::set-output name=nsyte_version_used::"
        fi

        echo "Executing $TOOL deployment command (secrets masked):"
        MASKED_COMMAND=$(echo "$DEPLOYMENT_COMMAND" | \
          sed -e "s/--nbunksec \"[^\"]*\"/--nbunksec \"***MASKED***\"/" \
              -e "s/--privatekey \"[^\"]*\"/--privatekey \"***MASKED***\"/" \
              -e "s/-k \"[^\"]*\"/-k \"***MASKED***\"/" \
              -e "s/--relays \"[^\"]*\"/--relays \"***MASKED***\"/" \
              -e "s/--servers \"[^\"]*\"/--servers \"***MASKED***\"/" \
              -e "s/-r [^ ]* [^ ]*/-r ***MASKED***/")
        echo "$MASKED_COMMAND"
        
        eval "$DEPLOYMENT_COMMAND"
        COMMAND_EXIT_CODE=$? # Capture the exit code of the deployment command

        if [[ $COMMAND_EXIT_CODE -eq 0 ]]; then
           echo ""
           echo -e "\033[1;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
           echo -e "\033[1;32m┃\033[0m  ✅ \033[1;32mDEPLOYMENT SUCCESSFUL\033[0m                                                    \033[1;32m┃\033[0m"
           echo -e "\033[1;32m┃\033[0m                                                                              \033[1;32m┃\033[0m"
           echo -e "\033[1;32m┃\033[0m  Tool: $TOOL$(printf '%*s' $((72 - ${#TOOL})) '' | tr ' ' ' ')\033[1;32m┃\033[0m"
           echo -e "\033[1;32m┃\033[0m  Status: Success                                                             \033[1;32m┃\033[0m"
           echo -e "\033[1;32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
           echo ""
           echo "::set-output name=status::success"
        else
           echo ""
           echo -e "\033[1;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
           echo -e "\033[1;31m┃\033[0m  ❌ \033[1;31mDEPLOYMENT FAILED\033[0m                                                       \033[1;31m┃\033[0m"
           echo -e "\033[1;31m┃\033[0m                                                                              \033[1;31m┃\033[0m"
           echo -e "\033[1;31m┃\033[0m  Tool: $TOOL$(printf '%*s' $((72 - ${#TOOL})) '' | tr ' ' ' ')\033[1;31m┃\033[0m"
           echo -e "\033[1;31m┃\033[0m  Exit Code: $COMMAND_EXIT_CODE$(printf '%*s' $((67 - ${#COMMAND_EXIT_CODE})) '' | tr ' ' ' ')\033[1;31m┃\033[0m"
           echo -e "\033[1;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
           echo ""
           echo "::error::$TOOL deployment command failed with exit code $COMMAND_EXIT_CODE."
           echo "::set-output name=status::failure"
           # This script step itself should still exit 0 to ensure outputs are processed.
           # The calling workflow (test.yml) has continue-on-error: true and will check the 'status' output.
        fi
        exit 0 # Explicitly exit 0 for this script step 
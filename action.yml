name: 'nsite Action'
description: 'Deploys static website files to Blossom/Nostr using the nsyte CLI.'
author: 'nsite-action Developers'

inputs:
  nsyte_version:
    description: 'The version of the nsyte CLI to use (e.g., "v0.5.3", "latest"). Needs to match a tag in github.com/sandwichfarm/nsyte/releases'
    required: false
    default: 'latest'
  nbunksec:
    description: 'The nbunksec string for authentication via NIP-46 bunker. Store this as a GitHub Secret.'
    required: true
  directory:
    description: 'The directory containing the static files to upload.'
    required: true
  relays:
    description: 'Array of Nostr relay WebSocket URIs to publish the site event to. Passed as a YAML array.'
    required: true
  servers:
    description: 'Array of Blossom server WebSocket URIs to upload files to. Passed as a YAML array.'
    required: true
  force:
    description: 'Corresponds to the --force flag in nsyte upload. Re-upload all files.'
    required: false
    default: 'false'
  purge:
    description: 'Corresponds to the --purge flag in nsyte upload. Delete remote files not present locally.'
    required: false
    default: 'false'
  verbose:
    description: 'Corresponds to the --verbose flag in nsyte upload. Show detailed output.'
    required: false
    default: 'false'
  concurrency:
    description: 'Corresponds to the --concurrency flag in nsyte upload. Number of parallel uploads.'
    required: false
    default: '4'
  fallback:
    description: 'Corresponds to the --fallback flag in nsyte upload. Path to the fallback HTML file (e.g., /index.html for SPAs).'
    required: false
    default: ''

outputs:
  status:
    description: 'Status of the upload operation (e.g., "success").'
  nsyte_version_used:
    description: 'The actual version of nsyte that was downloaded and used.'

branding:
  icon: 'upload-cloud'
  color: 'purple'

runs:
  using: 'composite'
  steps:
    - name: Determine Platform
      id: platform
      shell: bash
      run: |
        PLATFORM=""
        EXE_SUFFIX=""
        if [[ "${{ runner.os }}" == "Linux" ]]; then PLATFORM="linux";
        elif [[ "${{ runner.os }}" == "macOS" ]]; then PLATFORM="macos";
        elif [[ "${{ runner.os }}" == "Windows" ]]; then PLATFORM="windows"; EXE_SUFFIX=".exe";
        else echo "::error::Unsupported runner OS: ${{ runner.os }}"; exit 1; fi
        echo "Detected platform: $PLATFORM"
        echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
        echo "exe_suffix=$EXE_SUFFIX" >> $GITHUB_OUTPUT

    - name: Set nsyte Version
      id: version
      shell: bash
      run: |
        NSYT_VERSION_INPUT="${{ inputs.nsyte_version }}"
        NSYT_VERSION_FINAL=""
        VERSION_NUMBER=""
        if [[ "$NSYT_VERSION_INPUT" == "latest" ]]; then
          echo "Input version is 'latest', resolving..."
          LATEST_TAG=""
          # Try GH CLI first: it respects the "latest" flag set in GitHub UI if --limit 1 is used.
          if command -v gh &> /dev/null && gh auth status &> /dev/null; then
            echo "Using 'gh' CLI to find latest release."
            LATEST_TAG=$(gh release list -R sandwichfarm/nsyte --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null)
          fi
          # Fallback to curl /releases/latest endpoint if gh failed or not available/authed
          if [[ -z "$LATEST_TAG" ]]; then 
            echo "Using GitHub API (curl) to find latest release (gh CLI failed or not available/authed)."
            LATEST_TAG=$(curl -s -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/sandwichfarm/nsyte/releases/latest | grep -o '"tag_name": *"[^"]*"' | cut -d '"' -f 4)
          fi
          # If still no tag, try the semantic sort as a robust last resort (requires sort -V, usually on Linux)
          if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "null" ]]; then 
            echo "Fallback: Attempting semantic version sort of all release tags."
            ALL_TAGS=$(gh release list -R sandwichfarm/nsyte --json tagName --jq '.[].tagName' 2>/dev/null)
            if [[ -n "$ALL_TAGS" ]]; then
                LATEST_TAG=$(echo "$ALL_TAGS" | grep '^v[0-9]' | sort -V | tail -n 1)
            fi
          fi
          if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "null" ]]; then echo "::error::Failed to determine latest nsyte release tag."; exit 1; fi
          NSYT_VERSION_FINAL="$LATEST_TAG"
          echo "Resolved latest version: $NSYT_VERSION_FINAL"
        else
          NSYT_VERSION_FINAL="${{ inputs.nsyte_version }}"
          echo "Using specified version: $NSYT_VERSION_FINAL"
        fi
        # Extract version number for asset filename
        if [[ "$NSYT_VERSION_FINAL" =~ ^v(.+)$ ]]; then VERSION_NUMBER="${BASH_REMATCH[1]}"; else VERSION_NUMBER="$NSYT_VERSION_FINAL"; fi
        echo "Using nsyte tag: $NSYT_VERSION_FINAL (version number for asset: $VERSION_NUMBER)"
        echo "version=$NSYT_VERSION_FINAL" >> $GITHUB_OUTPUT
        echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT

    - name: Download nsyte
      id: download_nsyte 
      shell: bash
      run: |
        VERSION_TAG="${{ steps.version.outputs.version }}"
        VERSION_NUMBER="${{ steps.version.outputs.version_number }}"
        PLATFORM="${{ steps.platform.outputs.platform }}"
        EXE_SUFFIX="${{ steps.platform.outputs.exe_suffix }}"
        ASSET_FILENAME="nsyte-$PLATFORM-$VERSION_NUMBER$EXE_SUFFIX"
        DOWNLOAD_URL="https://github.com/sandwichfarm/nsyte/releases/download/$VERSION_TAG/$ASSET_FILENAME"
        echo "Downloading nsyte $ASSET_FILENAME from $DOWNLOAD_URL"
        mkdir -p nsyte_bin 
        HTTP_STATUS=$(curl -sL -w "%{http_code}" -o "nsyte_bin/$ASSET_FILENAME" "$DOWNLOAD_URL")
        if [[ "$HTTP_STATUS" != "200" ]]; then
          echo "::error::Failed to download $ASSET_FILENAME (HTTP Status: $HTTP_STATUS)."
          echo "Please check if version '$VERSION_TAG' and asset '$ASSET_FILENAME' exist for platform '$PLATFORM'."
          
          if command -v gh &> /dev/null && gh auth status &> /dev/null; then
            gh release view "$VERSION_TAG" -R sandwichfarm/nsyte --json assets --jq '.assets[].name' 2>/dev/null || echo "(Could not list assets with gh CLI)"
          else 
            curl -s "https://api.github.com/repos/sandwichfarm/nsyte/releases/tags/$VERSION_TAG" | grep '"name":' | cut -d '"' -f 4 || echo "(Could not list assets with API)"
          fi
          exit 1
        fi
        chmod +x "nsyte_bin/$ASSET_FILENAME"
        echo "nsyte_path=$(pwd)/nsyte_bin/$ASSET_FILENAME" >> $GITHUB_OUTPUT

    - name: Build nsyte command
      id: build_cmd
      shell: bash
      run: |
        CMD="\"${{ steps.download_nsyte.outputs.nsyte_path }}\" upload \"${{ inputs.directory }}\" -i --nbunksec \"${{ inputs.nbunksec }}\""
        
        RELAYS_INPUT="${{ inputs.relays }}"
        if [[ -n "$RELAYS_INPUT" ]]; then
          # Convert YAML multiline string to CSV, remove trailing comma if any
          RELAYS_CSV=$(echo -e "${RELAYS_INPUT// /\\ }" | awk 'NF' ORS=',' | sed 's/,$//')
          if [[ -n "$RELAYS_CSV" ]]; then
             CMD+=" --relays \"$RELAYS_CSV\""
          fi
        fi

        SERVERS_INPUT="${{ inputs.servers }}"
        if [[ -n "$SERVERS_INPUT" ]]; then
          # Convert YAML multiline string to CSV, remove trailing comma if any
          SERVERS_CSV=$(echo -e "${SERVERS_INPUT// /\\ }" | awk 'NF' ORS=',' | sed 's/,$//')
          if [[ -n "$SERVERS_CSV" ]]; then
            CMD+=" --servers \"$SERVERS_CSV\""
          fi
        fi

        if [[ "${{ inputs.force }}" == "true" ]]; then CMD+=" --force"; fi
        if [[ "${{ inputs.purge }}" == "true" ]]; then CMD+=" --purge"; fi
        if [[ "${{ inputs.verbose }}" == "true" ]]; then CMD+=" --verbose"; fi
        if [[ -n "${{ inputs.fallback }}" ]]; then CMD+=" --fallback \"${{ inputs.fallback }}\""; fi
        if [[ -n "${{ inputs.concurrency }}" ]]; then CMD+=" --concurrency ${{ inputs.concurrency }}"; fi
        echo "command=$CMD" >> $GITHUB_OUTPUT

    - name: Run nsyte upload
      id: nsyte_run
      shell: bash
      run: |
        set +e # Disable exit on error to manually handle exit codes and ensure outputs are set
        NSYT_COMMAND="${{ steps.build_cmd.outputs.command }}"
        
        # Set version used output regardless of command success/failure
        echo "nsyte_version_used=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT

        echo "Executing nsyte command (secrets masked):"
        MASKED_COMMAND=$(echo "$NSYT_COMMAND" | \
          sed -e "s/--nbunksec \"[^\"]*\"/--nbunksec \"***MASKED***\"/" \
              -e "s/--relays \"[^\"]*\"/--relays \"***MASKED***\"/" \
              -e "s/--servers \"[^\"]*\"/--servers \"***MASKED***\"/")
        echo "$MASKED_COMMAND"
        
        eval "$NSYT_COMMAND"
        COMMAND_EXIT_CODE=$? # Capture the exit code of the nsyte command

        if [[ $COMMAND_EXIT_CODE -eq 0 ]]; then
           echo "nsyte upload completed successfully."
           echo "status=success" >> $GITHUB_OUTPUT
        else
           echo "::error::nsyte upload command failed with exit code $COMMAND_EXIT_CODE." # Log the error
           echo "status=failure" >> $GITHUB_OUTPUT
           # This script step itself should still exit 0 to ensure GITHUB_OUTPUT is processed.
           # The calling workflow (test.yml) has continue-on-error: true and will check the 'status' output.
        fi
        exit 0 # Explicitly exit 0 for this script step 